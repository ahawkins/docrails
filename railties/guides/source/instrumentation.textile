h2. Instrumentation

This guide covers Rails internal notification system. It will also show you how to use it for our own applications.

endprologue.

h3. ActionController

h4. write_fragment.action_controller

- +:key+ := The complete key

<ruby>
{
  :key => 'posts/1-dasboard-view'
}
</ruby>

h4. read_fragment.action_controller

- +:key+ := The complete key

<ruby>
{
  :key => 'posts/1-dasboard-view'
}
</ruby>

h4. expire_fragment.action_controller

- +:key+ := The complete key

<ruby>
{
  :key => 'posts/1-dasboard-view'
}
</ruby>

h4. exist_fragment?.action_controller

- +:key+ := The complete key

<ruby>
{
  :key => 'posts/1-dasboard-view'
}
</ruby>

h4. write_page.action_controller

- +path+ := Request path

<ruby>
{
  :path => '/users/1'
}
</ruby>

h4. expire_page.action_controller

- +path+ := Request path

<ruby>
{
  :path => '/users/1'
}
</ruby>

h4. start_processing.action_controller

- +:controller+ := The controller name
- +:action+ := The action 
- +:params+ := Hash of request parameters without any filtered parameters
- +:format+ := html/js/json/xml etc
- +:method+ := HTTP request verb
- +:path+ := Request path

<ruby>
{
  :controller => "PostsController",
  :action => "new",
  :params => { "action" => "new", "controller" => "posts" },
  :format => :html,
  :method => "GET",
  :path => "/posts/new"
}
</ruby>

h4. process_action.action_controller

- +:controller+ := The controller name
- +:action+ := The action 
- +:params+ := Hash of request parameters without any filtered parameters
- +:format+ := html/js/json/xml etc
- +:method+ := HTTP request verb
- +:path+ := Request path
- +:status+ := HTTP response code
- +:view_runtime+ := MS spent in the view

<ruby>
{
  :controller => "PostsController",
  :action => "index",
  :params => {"action" => "index", "controller" => "posts"},
  :format => :html,
  :method => "GET",
  :path => "/posts",
  :status => 200,
  :view_runtime => 46.848,
  :db_runtime => 0.157
}
</ruby>

h4. send_file.action_controller

- +:path+ := Path to the file

INFO. Additional keys may be added by the caller.

h4. send_data.action_controller

+ActionController+ does not had any specific information to the payload. All options are passed through to the payload.

h4. redirect_to.action_controller

- +:status+ := HTTP response code
- +:location+ := URL to redirect to

<ruby>
{
  :status => 302, 
  :location => "http://localhost:3000/posts/new"
}
</ruby>

h4. halted_callback.action_controller

- +:filter+ := Filter that stopped the action

<ruby>
{
  :filter => ":halting_filter"
}
</ruby>

h3. ActionView

h4. render_template.action_view

- +:identifier+ := Full path to template
- +:layout+ := Applicable layout

<ruby>
{
  :identifier => "/Users/adam/projects/notifications/app/views/posts/index.html.erb",
  :layout => "layouts/application"
}
</ruby>

h4. render_partial.action_view

- +:identifier+ := Full path to template

<ruby>
{
  :identifier => "/Users/adam/projects/notifications/app/views/posts/_form.html.erb",
}
</ruby>

h3. ActiveRecord

h4. sql.active_record

- +:sql+ := SQL statement
- +:name+ := Name of the operation
- +:object_id+ := +self.object_id+

INFO. The adapters will add their own data as well.

<ruby>
{
  :sql => "SELECT \"posts\".* FROM \"posts\" ",
  :name => "Post Load",
  :connection_id => 70307250813140,
  :binds => []
}
</ruby>

h4. identity.active_record

- +:line+ := Primary Key of object in the identity map
- +:name+ := Record's class
- +:connection_id+ := +self.object_id+

h3. ActionMailer

h4. receive.action_mailer

- +:mailer+ := Name of class processing the action
- +:message_id+ := Message ID of the underlying mail object
- +:subject+ := Subject of the email
- +:to+ := array of email addresses to deliver to
- +:from+ := array of email address it was sent from
- +:bcc+ := array of email addresses it was bcc'ed to. Only included if there are any.
- +:bcc+ := array of email addresses it was cc'ed to. Only included if there are any.
- +:date+ := Time object for when the email was sent
- +:mail+ := +mail#encoded+

<ruby>
{
  :mailer => "Notification",
  :message_id => "4f5b5491f1774_181b23fc3d4434d38138e5@mba.local.mail",
  :subject => "Rails Guides",
  :to => ["users@rails.com", "ddh@rails.com"],
  :from => ["me@rails.com"],
  :date => Sat, 10 Mar 2012 14:18:09 +0100,
  :mail=> "..." # ommitted for beverity
}
</ruby>

h4. deliver.action_mailer

- +:mailer+ := Name of class processing the action
- +:message_id+ := Message ID of the underlying mail object
- +:subject+ := Subject of the email
- +:to+ := array of email addresses to deliver to
- +:from+ := array of email address it was sent from
- +:bcc+ := array of email addresses it was bcc'ed to. Only included if there are any.
- +:bcc+ := array of email addresses it was cc'ed to. Only included if there are any.
- +:date+ := Time object for when the email was sent
- +:mail+ := +mail#encoded+

<ruby>
{
  :mailer => "Notification",
  :message_id => "4f5b5491f1774_181b23fc3d4434d38138e5@mba.local.mail",
  :subject => "Rails Guides",
  :to => ["users@rails.com", "ddh@rails.com"],
  :from => ["me@rails.com"],
  :date => Sat, 10 Mar 2012 14:18:09 +0100,
  :mail=> "..." # ommitted for beverity
}
</ruby>

h3. ActiveResource

h4. request.active_resource

- +:method+ := HTTP method
- +:request_uri+ := Complete URI
- +:result+ := HTTP response object

h3. ActiveSupport

h4. cache_read.active_support

- +:key+ := Key used in the store
- +:hit+ := If this read is a hit
- +:super_operation+ := :fetch is added when a read is used with +#fetch+

h4. cache_generate.active_support

This event is only used when +#fetch+ is called with a block.

- +:key+ := Key used in the store

INFO. Options passed to fetch will be merged with the payload when writing to the store

<ruby>
{ 
  :key => 'name-of-complicated-computation'
}
</ruby>


h4. cache_fetch_hit.active_support

This event is only used when +#fetch+ is called with a block.

- +:key+ := Key used in the store

INFO. Options passed to fetch will be merged with the payload.

<ruby>
{ 
  :key => 'name-of-complicated-computation'
}
</ruby>

h4. cache_write.active_support

- +:key+ := Key used in the store

INFO. Cache stores my add their own keys

<ruby>
{ 
  :key => 'name-of-complicated-computation'
}
</ruby>

h4. cache_delete.active_support

- +:key+ := Key used in the store

<ruby>
{ 
  :key => 'name-of-complicated-computation'
}
</ruby>

h4. cache_exist?.active_support

- +:key+ := Key used in the store

<ruby>
{ 
  :key => 'name-of-complicated-computation'
}
</ruby>


h3. Rails

h4. deprecation.rails

- +:message+ := The deprecation warning
- +:callstack+ := Where the deprecation came from

